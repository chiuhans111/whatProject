var Discord = require('discord.js');
var Client = Discord.Client;
var Message = Discord.Message;

/**
 * @typedef {function(State, Message, Function)} Handler
*/

/**
 * @param {String} content
 */
function State(content) {
    this.content = content;
    this.age = 0;
}

function App() {
    var me = this;


    this.client = require('./client');

    var x;

    this.handlers = [];

    /**
     * @param {Message} message
     */
    this.emit = function (message, callback) {
        me.handle(new State(message.content), message, callback);
    }

    /**
     * @param {Message} req
     */
    this.handle = function (state, req, next) {

        for (var handler of me.handlers) {
            var stop = true;
            handler(state, req, function () {
                stop = false;
            });

            if (stop) return;
        }
        if (next instanceof Function) next();
    }

    /**
     * @param {Handler} handler
     * @param {function(State, Message)} [condition]
     */
    this.use = function (handler, condition) {
        if (handler instanceof App) handler = handler.handle;

        if (condition instanceof Function) {
            me.handlers.push(function (state, req, next) {
                // copying
                var temp = state;
                state = {};
                for (var i in temp) state[i] = temp[i];
                state.age++;

                if (!condition(state, req)) return next();
                handler(state, req, next);
            });
        } else me.handlers.push(handler);
    }

    /**
     * @param {string} command
     * @param {Handler|App} handler
     */
    this.get = function (command, handler) {

        me.use(handler, (state) => {
            var result = state.content.match(`^\\s*${command}(\\s+([^]+))?$`);
            if (result) {
                state.content = result[2] || '';
                return true;
            } else return false;
        })
    }

}
/**
 * @return {App}
 */
module.exports = function () {
    return new App();
}
